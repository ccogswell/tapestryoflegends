{
  "export_timestamp": "2025-08-14T07:29:35.097598",
  "export_version": "1.0",
  "documentation_files": {
    "DISCORD_BOT_COMMANDS.md": {
      "filename": "DISCORD_BOT_COMMANDS.md",
      "content": "# Discord D&D Bot - Complete Command Reference\n\n## Overview\nThis Discord bot provides comprehensive D&D session management and character alias systems. All commands are slash commands (start with `/`).\n\n---\n\n## üé≤ Session Management Commands\n\n### `/rp_new` - Start a new roleplay session\n**Description:** Start a new roleplay session with interactive setup\n**Parameters:** None\n**Usage:** Creates a session setup modal where you can:\n- Set session name and type (Combat, Social, Mixed, Other)\n- Set maximum players (1-20)\n- Automatically creates a dedicated thread for session control\n\n### `/rp_end` - End the active roleplay session\n**Description:** End the active roleplay session in this thread (DM only)\n**Parameters:** None\n**Usage:** \n- Calculates final rewards for all participants\n- Posts reward summary to #rp-rewards channel\n- Archives the session thread\n\n### `/rp_join` - Join the active roleplay session\n**Description:** Join the active roleplay session in this thread\n**Parameters:** None\n**Usage:** Opens a modal to enter:\n- Character name\n- Character level\n- Adds you to the active session\n\n### `/rp_leave` - Leave the active roleplay session\n**Description:** Leave the active roleplay session in this thread\n**Parameters:** None\n**Usage:** Removes you from the session and calculates your participation time\n\n### `/rp_pause` - Pause the active roleplay session (DM only)\n**Description:** Pause the active roleplay session in this thread\n**Parameters:** None\n**Permissions:** DM only\n**Usage:** Temporarily stops time tracking for all participants\n\n### `/rp_resume` - Resume the paused roleplay session (DM only)\n**Description:** Resume the paused roleplay session in this thread\n**Parameters:** None\n**Permissions:** DM only\n**Usage:** Resumes time tracking after a pause\n\n### `/rp_status` - View information about active roleplay sessions\n**Description:** View information about active roleplay sessions\n**Parameters:** None\n**Usage:** Shows all active sessions across the server\n\n### `/rp_kick` - Remove a player from the session (DM only)\n**Description:** Remove a player from the roleplay session in this thread\n**Parameters:**\n- `user` - The user to remove from the session\n**Permissions:** DM only\n**Usage:** Forcibly removes a player and calculates their participation time\n\n### `/rp_info` - Get detailed information about the session\n**Description:** Get detailed information about the session in this thread\n**Parameters:** None\n**Usage:** Shows session details, participants, and time tracking info\n\n### `/rp_repost` - Repost the session control panel\n**Description:** Repost the session control panel in this thread\n**Parameters:** None\n**Usage:** Re-displays the interactive session control buttons\n\n### `/rp_debug_update` - Force update participant tables (debug)\n**Description:** Force update participant tables for debugging\n**Parameters:** None\n**Usage:** Manual database synchronization for troubleshooting\n\n---\n\n## üé≠ Character Alias System Commands\n\n### `/alias register` - Quick character creation\n**Description:** Register a new character alias with popup form\n**Parameters:** None\n**Usage:** Opens a simple modal for basic character creation:\n- Character name\n- Trigger pattern\n- Optional group name\n\n### `/alias create` - Detailed character creation\n**Description:** Create a detailed character with multi-step form\n**Parameters:** None\n**Usage:** Opens a comprehensive 3-step modal for detailed character creation:\n- Basic info (name, trigger, group, subgroup)\n- Character details (race, class, level, pronouns)\n- Backstory and description\n\n### `/alias list` - List your character aliases\n**Description:** List your character aliases in tree or simple view\n**Parameters:**\n- `view_type` - \"Tree view\" (with shared aliases) or \"Simple list\" (personal only)\n- `user` - View another user's aliases (optional)\n- `group` - Filter by specific group name (optional)\n**Usage:** \n- **Tree view:** Shows hierarchical folder structure with shared aliases\n- **Simple list:** Shows flat list of personal aliases only\n\n### `/alias show` - Show detailed character information\n**Description:** Show detailed information about an alias\n**Parameters:**\n- `name` - The name of the alias to view\n**Usage:** Displays complete character profile with stats and usage information\n\n### `/alias edit` - Edit an existing character\n**Description:** Edit an existing character alias with popup form\n**Parameters:**\n- `name` - The name of the alias to edit\n**Usage:** Opens pre-filled modal to modify character details\n\n### `/alias remove` - Remove a character alias\n**Description:** Remove a character alias\n**Parameters:**\n- `name` - The name of the alias to remove\n**Usage:** Permanently deletes a character (with confirmation)\n\n### `/alias avatar` - Upload character avatar\n**Description:** Upload an avatar image for your character\n**Parameters:**\n- `name` - Character name to add avatar to\n- `image` - Image file (under 2MB)\n**Usage:** Sets character avatar for webhook posts\n\n### `/alias auto` - Toggle auto-proxy mode\n**Description:** Enable/disable sticky auto-proxy\n**Parameters:**\n- `alias_name` - Character to auto-proxy as\n- `enabled` - True to enable, False to disable\n**Usage:** Automatically posts all your messages as the selected character\n\n---\n\n## ü§ù Sharing and Collaboration Commands\n\n### `/alias share` - Share alias group with another user\n**Description:** Share your alias group with another user\n**Parameters:**\n- `group` - The group name to share\n- `user` - The user to share with\n- `permission` - Permission level (speaker, manager, owner)\n**Usage:** \n- **Speaker:** Can use shared aliases\n- **Manager:** Can use and edit shared aliases\n- **Owner:** Full control over shared aliases\n\n### `/alias unshare` - Remove group sharing permissions\n**Description:** Remove sharing permissions for a group\n**Parameters:**\n- `group` - The group name to unshare\n- `user` - The user to remove permissions from\n**Usage:** Revokes access to an entire shared group\n\n### `/alias share_alias` - Share single character\n**Description:** Share a single character alias with another user\n**Parameters:**\n- `alias_name` - The character name to share\n- `user` - The user to share with\n- `permission` - Permission level (speaker, manager, owner)\n**Usage:** Shares just one specific character instead of a whole group\n\n### `/alias unshare_alias` - Remove single character sharing\n**Description:** Remove sharing permissions for a single character\n**Parameters:**\n- `alias_name` - The character name to unshare\n- `user` - The user to remove permissions from\n**Usage:** Revokes access to just one specific character\n\n### `/alias share_subgroup` - Share specific subgroup\n**Description:** Share a specific subgroup with another user\n**Parameters:**\n- `group` - The main group name\n- `subgroup` - The subgroup name to share\n- `user` - The user to share with\n- `permission` - Permission level (speaker, manager, owner)\n**Usage:** Shares only characters within a specific subgroup\n\n### `/alias shared` - View groups shared with you\n**Description:** View groups shared with you\n**Parameters:** None\n**Usage:** Lists all alias groups that others have shared with you\n\n### `/alias subgroups` - List subgroups in a group\n**Description:** List subgroups in a group\n**Parameters:**\n- `group` - The group name to list subgroups for\n**Usage:** Shows all subgroups within a specific group\n\n---\n\n## ‚ö° Conflict Resolution Commands\n\n### `/alias conflicts` - Check for trigger conflicts\n**Description:** Check for trigger conflicts between your aliases\n**Parameters:** None\n**Usage:** \n- Identifies conflicts between personal and shared aliases\n- Shows priority system (personal overrides > personal aliases > shared aliases)\n- Provides instructions for resolving conflicts\n\n### `/alias override` - Create personal trigger override\n**Description:** Create personal trigger for a shared alias\n**Parameters:**\n- `alias_name` - Name of the shared alias to override\n- `new_trigger` - Your personal trigger for this alias\n**Usage:** \n- Creates a personal trigger for a shared alias\n- Doesn't affect the original shared alias\n- Resolves trigger conflicts\n\n### `/alias overrides` - List your personal overrides\n**Description:** List your personal trigger overrides\n**Parameters:** None\n**Usage:** Shows all personal triggers you've created for shared aliases\n\n### `/alias remove_override` - Remove personal trigger override\n**Description:** Remove a personal trigger override\n**Parameters:**\n- `alias_name` - Name of the alias to remove override for\n**Usage:** Removes your personal trigger and reverts to the shared trigger\n\n---\n\n## üìÅ Data Management Commands\n\n### `/alias export` - Export characters to CSV\n**Description:** Export your character aliases to a CSV file\n**Parameters:** None\n**Usage:** \n- Downloads all your characters as a CSV file\n- Includes all character details and metadata\n- Useful for backups and bulk editing\n\n### `/alias import` - Import characters from CSV\n**Description:** Import character aliases from a CSV file\n**Parameters:**\n- `file` - CSV file to import\n- `update_existing` - Whether to update existing characters\n**Usage:** \n- Bulk import characters from CSV file\n- Can update existing characters or skip duplicates\n- Validates data before importing\n\n---\n\n## üèÜ Achievement System Commands\n\n### `/achievements` - View your achievements and progress\n**Description:** View your achievements and progress\n**Parameters:** None\n**Usage:** Shows your earned achievements and progress toward milestones\n\n### `/leaderboard` - View the achievement leaderboard\n**Description:** View the achievement leaderboard\n**Parameters:** None\n**Usage:** Shows server-wide achievement rankings\n\n---\n\n## üìñ Help and Information\n\n### `/alias help` - Get help with the alias system\n**Description:** Get help with the alias system\n**Parameters:** None\n**Usage:** Comprehensive help guide covering:\n- How the alias system works\n- Trigger pattern examples\n- Multi-line conversations\n- Character profiles\n- Available commands\n- Tips and best practices\n\n---\n\n## üéØ Context Menu Commands\n\n### **View Character Profile** (Right-click context menu)\n**Usage:** Right-click any character message ‚Üí Apps ‚Üí \"View Character Profile\"\n**Description:** Shows detailed character information, usage stats, and owner details\n\n---\n\n## üìù How Triggers Work\n\nCharacter aliases use trigger patterns to post messages as your characters:\n\n### Trigger Types:\n- **Prefix:** `k:` ‚Üí Type `k:Hello everyone!`\n- **Brackets:** `[text]` ‚Üí Type `[Hello everyone!]`\n- **Parentheses:** `(text)` ‚Üí Type `(Hello everyone!)`\n- **Name:** `Kaelen:` ‚Üí Type `Kaelen:Hello everyone!`\n\n### Multi-line Conversations:\n```\nm. Hey how are you?\ns. I am great, you?\nm. Not too bad!\n```\nEach line posts as a separate message from the respective character.\n\n---\n\n## üé≠ Permission Levels\n\n### Sharing Permission Levels:\n- **Speaker:** Can use shared aliases\n- **Manager:** Can use and edit shared aliases  \n- **Owner:** Full control (use, edit, share, unshare)\n\n### Priority System:\n1. **Personal Overrides** (highest priority)\n2. **Personal Aliases** \n3. **Shared Aliases** (lowest priority)\n\n---\n\n## üí° Tips and Best Practices\n\n- Choose unique triggers to avoid conflicts\n- Upload images under 2MB for avatars\n- Keep character names under 80 characters\n- Use export/import for bulk character management\n- Test your trigger pattern after creating\n- Use groups to organize characters by campaign\n- Use subgroups for character variants or NPCs\n- Check `/alias conflicts` regularly to avoid issues\n- Use personal overrides to resolve trigger conflicts\n\n---\n\n*For additional help, ask a server moderator or use `/alias help` for more detailed information about the alias system.*",
      "size_bytes": 11751,
      "lines": 339
    },
    "replit.md": {
      "filename": "replit.md",
      "content": "# Overview\n\nThis project is a Discord bot designed to streamline D&D roleplay sessions. Its primary purpose is to simplify session management for Dungeon Masters by automating time tracking and reward distribution, calculating experience points (XP) and gold, and managing sessions via an interactive Discord UI. Key capabilities include starting/pausing/resuming sessions, enabling players to join/leave, applying bonus calculations, tracking participants, and providing comprehensive reward management with editable tables. It also features a robust achievement system and a Tupperbox-style character aliasing system with a fully functional web interface for alias management, including bulk operations and sharing. The ambition is to create an indispensable tool for D&D communities, enhancing the roleplaying experience by reducing administrative overhead and ensuring fair reward distribution.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Bot Framework\n- **Discord.py**: Utilizes the discord.py library, implementing slash commands and interactive UI components organized into modular cogs.\n\n## Session Management\n- **PostgreSQL Backend**: Sessions are persistently stored in a PostgreSQL database with in-memory caching for performance.\n- **Real-Time Tracking**: Tracks participant join/leave times and calculates active participation duration with automated time calculations.\n- **Multi-Guild Support**: Ensures data isolation across different Discord servers.\n- **Discord Integration**: Automatically creates dedicated Discord threads for session control, posts announcements, and dynamically updates forum post tags.\n- **Role-Based Access Control**: Implements automatic role-based access for session management and control buttons.\n\n## Reward System\n- **Scaling Rewards**: XP and gold rewards scale based on character level and participation time.\n- **Bonus Multipliers**: DMs receive a 1.5x bonus; sessions 2+ hours receive a 1.2x bonus.\n- **Minimum Participation**: Requires 30 minutes for rewards, with time rounded to the nearest 30-minute interval thereafter.\n- **Achievement System**: Comprehensive achievement and milestone tracking with automatic progress.\n\n## User Interface\n- **Interactive Components**: Leverages Discord's UI components (buttons, views, modals) for session control, setup, and character information collection.\n- **Persistent Views**: Session control buttons remain functional across bot restarts.\n- **Real-Time Updates**: Provides immediate feedback for user actions using ephemeral messages.\n\n## Character Alias System\n- **Real-Time Message Processing**: Listens to all messages for alias triggers, supporting case-insensitive matching.\n- **Webhook Integration**: Uses Discord webhooks to post messages with character names and avatars for authentic roleplay, including thread support and automatic webhook cleanup/reuse.\n- **Pattern Matching**: Supports various trigger patterns (prefix, bracket, parentheses) and a sticky auto-proxy system.\n- **Database Storage**: Aliases stored in PostgreSQL with guild-specific isolation, user ownership, and usage tracking.\n- **Command Structure**: Comprehensive `/alias` command group with subcommands and context menu integration.\n- **Avatar Upload System**: Object storage integration for avatar uploads.\n- **Bulk Management**: Supports CSV import/export.\n- **Multi-Step Creation**: Enhanced character creation with a detailed 3-step modal process.\n- **Group Permissions System**: Simplified sharing allowing users to share existing alias groups with owner, manager, and speaker permission levels, including single alias and subgroup sharing.\n- **Conflict Detection System**: Identifies and resolves trigger conflicts between personal and shared aliases.\n- **Personal Trigger Override System**: Allows users to create personal triggers for shared aliases.\n- **Message Consolidation**: Intelligent message consolidation combines subsequent messages within 3 seconds into a single natural character message, supporting both multi-character conversations and single-character multi-line messages.\n\n## Web Interface System\n- **Discord OAuth Authentication**: Secure login using Discord credentials.\n- **User Dashboard**: Displays personal statistics, alias overview, and recent session history.\n- **Enhanced Alias Management**: Modern two-panel interface with grouped/folder view, drag-and-drop organization, and modal-based editing with avatar uploads.\n- **API Endpoints**: RESTful API for CRUD operations on aliases.\n- **Admin Panel**: Role-based backend management with system statistics and user oversight.\n\n## Data Models\n- **Database Models**: PostgreSQL-backed models for `Guild`, `RPSession`, `SessionParticipant`, `SessionReward`, `CharacterAlias`, `SharedGroup`, `SharedGroupPermission`, `GroupPermission`, and `PlayerStats`.\n- **SQLAlchemy ORM**: Provides type-safe database operations and relationship management.\n- **Comprehensive Statistics System**: Fully implemented 57-column PlayerStats database with session planning analytics including session types, participation time, hosting stats, character progression, rewards, engagement, and reliability metrics.\n\n# External Dependencies\n\n## Database\n- **PostgreSQL**: Primary data persistence layer.\n- **SQLAlchemy**: ORM for database interaction.\n\n## Discord API\n- **Discord.py Library**: Core library for all Discord bot functionalities.\n\n## Web Server\n- **Flask**: Lightweight web server for the integrated web interface.\n\n## Environment Configuration\n- **Environment Variables**: Utilizes `DISCORD_BOT_TOKEN` and port configurations.",
      "size_bytes": 5639,
      "lines": 71
    },
    "README.md": {
      "filename": "README.md",
      "content": "# Tapestry of Legends Discord Bot\n\nA sophisticated Discord bot for Dungeons & Dragons server management, providing intelligent roleplaying tools with advanced message processing capabilities.\n\n## Features\n\n### üé≤ Session Management\n- Start, pause, resume, and end D&D roleplay sessions\n- Automatic time tracking and participant management\n- Discord thread integration with control panels\n- Real-time session status updates\n\n### üé≠ Character Alias System\n- Tupperbox-style character switching with triggers\n- Webhook integration for authentic character posting\n- Avatar support and character profiles\n- Shared alias groups and permissions\n\n### üìä Statistics & Analytics\n- Comprehensive session statistics (57 metrics)\n- Player performance tracking\n- Achievement system with progress tracking\n- Server-wide leaderboards\n\n### üèÜ Achievement System\n- Automated milestone tracking\n- Role-play engagement rewards\n- Session participation achievements\n- Character diversity recognition\n\n## Bot-Only Version\n\nThis is the bot-only version with the web interface removed for:\n- Simplified deployment\n- Reduced resource usage\n- Enhanced security\n- Pure Discord integration\n\n## Quick Start\n\n### Prerequisites\n- Docker and Docker Compose\n- PostgreSQL database\n- Discord Bot Token\n\n### Deployment\n\n1. **Clone Repository**\n   ```bash\n   git clone https://github.com/ccogswell/tapestryoflegends.git\n   cd tapestryoflegends\n   ```\n\n2. **Configure Environment**\n   ```bash\n   cp .env.example .env\n   # Edit .env with your bot token and database credentials\n   ```\n\n3. **Deploy with Docker**\n   ```bash\n   docker-compose up -d\n   ```\n\n## Commands\n\nThe bot provides 17 slash commands organized into categories:\n\n- **Session Management**: `/rp_new`, `/rp_end`, `/rp_join`, `/rp_leave`\n- **Character Aliases**: `/alias` with multiple subcommands\n- **Statistics**: `/stats` with personal/server/leaderboard views\n- **Achievements**: `/achievements`, `/leaderboard`\n\n## Architecture\n\n- **Discord.py**: Modern async Discord bot framework\n- **PostgreSQL**: Persistent data storage\n- **Docker**: Containerized deployment\n- **Multi-guild**: Supports multiple Discord servers\n\n## License\n\nThis project is licensed under the MIT License.\n\n## Support\n\nFor support, join our Discord server or create an issue on GitHub.",
      "size_bytes": 2294,
      "lines": 87
    },
    "PROJECT_STRUCTURE.md": {
      "filename": "PROJECT_STRUCTURE.md",
      "content": "# Multi-App VPS Project Structure\n\n## Recommended Directory Layout\n\n```\n/home/user/apps/\n‚îú‚îÄ‚îÄ docker-compose.yml              # Main orchestration file\n‚îú‚îÄ‚îÄ .env                           # Shared environment variables\n‚îú‚îÄ‚îÄ nginx/\n‚îÇ   ‚îú‚îÄ‚îÄ nginx.conf                 # Reverse proxy configuration\n‚îÇ   ‚îî‚îÄ‚îÄ ssl/                       # SSL certificates\n‚îú‚îÄ‚îÄ tapestryoflegends/             # Tapestry of Legends Bot App\n‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile\n‚îÇ   ‚îú‚îÄ‚îÄ bot/\n‚îÇ   ‚îú‚îÄ‚îÄ web/\n‚îÇ   ‚îú‚îÄ‚îÄ models.py\n‚îÇ   ‚îú‚îÄ‚îÄ run.py\n‚îÇ   ‚îî‚îÄ‚îÄ deploy_requirements.txt\n‚îú‚îÄ‚îÄ app2/                          # Your Second App\n‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile\n‚îÇ   ‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îú‚îÄ‚îÄ package.json (if Node.js)\n‚îÇ   ‚îî‚îÄ‚îÄ requirements.txt (if Python)\n‚îú‚îÄ‚îÄ app3/                          # Your Third App\n‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile\n‚îÇ   ‚îú‚îÄ‚îÄ ...\n‚îú‚îÄ‚îÄ app4/                          # Your Fourth App\n‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile\n‚îÇ   ‚îú‚îÄ‚îÄ ...\n‚îî‚îÄ‚îÄ web-portal/                    # Main Frontend Portal\n    ‚îú‚îÄ‚îÄ Dockerfile\n    ‚îú‚îÄ‚îÄ src/\n    ‚îú‚îÄ‚îÄ public/\n    ‚îî‚îÄ‚îÄ package.json\n```\n\n## Database Strategy\n\n### Option 1: Shared PostgreSQL (Recommended)\n- One PostgreSQL container\n- Separate databases per app:\n  - `tapestryoflegends` - Tapestry of Legends bot data\n  - `app2_db` - App 2 data\n  - `app3_db` - App 3 data\n  - `app4_db` - App 4 data\n  - `shared_db` - Cross-app shared data\n\n### Option 2: App-Specific Databases\n- Each app gets its own database container\n- Better isolation but more resource usage\n\n## Deployment Commands\n\n### Start All Apps\n```bash\ncd /home/user/apps\ndocker-compose up -d\n```\n\n### Start Individual App\n```bash\ndocker-compose up -d tapestryoflegends\ndocker-compose up -d app2\n```\n\n### Update Single App\n```bash\ndocker-compose stop tapestryoflegends\ndocker-compose build tapestryoflegends --no-cache\ndocker-compose up -d tapestryoflegends\n```\n\n### View Logs\n```bash\ndocker-compose logs -f tapestryoflegends\ndocker-compose logs -f app2\n```\n\n### Monitor All Apps\n```bash\ndocker-compose ps\ndocker stats\n```\n\n## Port Allocation\n- **Port 80/443**: Nginx (Public access)\n- **Port 5000**: Main Web Portal\n- **Port 5001**: Tapestry of Legends Bot\n- **Port 5002**: App 2\n- **Port 5003**: App 3\n- **Port 5004**: App 4\n- **Port 5432**: PostgreSQL (Internal)\n\n## Inter-App Communication\n\nApps can communicate via:\n1. **HTTP APIs**: `http://tapestryoflegends:5000/api/endpoint`\n2. **Shared Database**: Common tables in `shared_db`\n3. **Message Queue**: Redis/RabbitMQ (optional)\n\n## Benefits of This Structure\n\n### Isolation\n- Each app runs independently\n- Failures don't cascade\n- Different technology stacks possible\n\n### Scalability\n- Scale individual apps based on load\n- Easy to add new apps\n- Resource limits per container\n\n### Maintenance\n- Update apps independently\n- Roll back individual apps\n- Clear separation of concerns\n\n### Development\n- Teams can work on different apps\n- Consistent deployment process\n- Easy local development with docker-compose\n\n## Security Considerations\n\n### Network Isolation\n- Apps communicate via internal Docker network\n- Only nginx exposed to public internet\n- Database only accessible from app containers\n\n### Environment Variables\n- Secrets managed centrally in .env\n- No hardcoded credentials\n- App-specific environment isolation\n\n### SSL/TLS\n- Nginx handles SSL termination\n- Internal communication over HTTP (encrypted network)\n- Centralized certificate management",
      "size_bytes": 3517,
      "lines": 138
    },
    "DEPLOYMENT_GUIDE.md": {
      "filename": "DEPLOYMENT_GUIDE.md",
      "content": "# Tapestry of Legends Bot VPS Deployment Guide\n\n## Overview\nThis guide will help you deploy the Tapestry of Legends Discord Bot (bot-only version) to your Namecheap VPS. This version removes the web interface and runs as a pure Discord bot.\n\n## Prerequisites\n- Namecheap VPS with Ubuntu/Debian\n- Root or sudo access\n- Domain name (optional, for web interface)\n- Discord bot token\n\n## Deployment Steps\n\n### 1. Prepare Your VPS\n```bash\n# Connect to your VPS\nssh user@your-vps-ip\n\n# Update system\nsudo apt update && sudo apt upgrade -y\n\n# Install required packages\nsudo apt install git curl wget -y\n```\n\n### 2. Transfer Bot Code\nChoose one method:\n\n**Option A: Git Clone (if you've pushed to GitHub)**\n```bash\ngit clone https://github.com/yourusername/tapestryoflegends.git\ncd tapestryoflegends\n```\n\n**Option B: Direct Upload**\n- Download your project as ZIP from Replit\n- Upload to VPS using SCP:\n```bash\nscp -r tapestryoflegends/ user@your-vps-ip:/home/user/\n```\n\n### 3. Configure Environment\n```bash\n# Copy example environment file\ncp .env.example .env\n\n# Edit with your actual values\nnano .env\n```\n\n**Required Configuration:**\n- `DISCORD_BOT_TOKEN`: Your Discord bot token\n- `DB_PASSWORD`: Secure password for PostgreSQL\n- `SESSION_SECRET`: Random 32+ character string\n\n### 4. Deploy with Docker\n```bash\n# Make deployment script executable\nchmod +x deploy.sh\n\n# Run deployment script\n./deploy.sh\n\n# Copy your bot code to the created directory\ncp -r * /home/$USER/tapestryoflegends/\n\n# Edit environment file with your values\nnano /home/$USER/tapestryoflegends/.env\n```\n\n### 5. Start the Bot\n```bash\ncd /home/$USER/discord-dnd-bot\nsudo systemctl start discord-dnd-bot\nsudo systemctl status discord-dnd-bot\n```\n\n### 6. Configure Shared Web Portal\n\n**Nginx Configuration:**\n1. Add the provided nginx configuration to your main server block\n2. The bot will be accessible at `yourdomain.com/discord-bot/`\n3. Adjust ports if needed (default: 5001)\n\n**Port Allocation for Multiple Apps:**\n- Discord Bot: Port 5001\n- App 2: Port 5002  \n- App 3: Port 5003\n- App 4: Port 5004\n- Main Web Portal: Port 80/443\n\n### 7. Database Setup\nThe PostgreSQL database will be automatically created and configured through Docker Compose.\n\n**Manual Database Access (if needed):**\n```bash\ndocker exec -it discord-bot-postgres psql -U discord_bot -d discord_bot\n```\n\n## Management Commands\n\n### Start/Stop/Restart\n```bash\nsudo systemctl start discord-dnd-bot\nsudo systemctl stop discord-dnd-bot\nsudo systemctl restart discord-dnd-bot\n```\n\n### View Logs\n```bash\ncd /home/$USER/discord-dnd-bot\ndocker-compose logs -f discord-bot\n```\n\n### Update Bot Code\n```bash\ncd /home/$USER/discord-dnd-bot\ngit pull  # if using git\ndocker-compose down\ndocker-compose build --no-cache\ndocker-compose up -d\n```\n\n## Firewall Configuration\n```bash\n# Allow SSH, HTTP, HTTPS\nsudo ufw allow ssh\nsudo ufw allow 80\nsudo ufw allow 443\n\n# Allow your app ports (adjust as needed)\nsudo ufw allow 5001:5004/tcp\n\nsudo ufw enable\n```\n\n## Monitoring & Maintenance\n\n### Health Checks\n- Bot status: `http://your-domain/discord-bot/status`\n- Web interface: `http://your-domain/discord-bot/`\n\n### Backup Database\n```bash\ndocker exec discord-bot-postgres pg_dump -U discord_bot discord_bot > backup.sql\n```\n\n### Restore Database\n```bash\ndocker exec -i discord-bot-postgres psql -U discord_bot discord_bot < backup.sql\n```\n\n## Troubleshooting\n\n### Bot Not Responding\n1. Check systemd service: `sudo systemctl status discord-dnd-bot`\n2. Check Docker containers: `docker-compose ps`\n3. Check logs: `docker-compose logs discord-bot`\n\n### Database Connection Issues\n1. Check PostgreSQL container: `docker-compose logs postgres`\n2. Verify DATABASE_URL in .env file\n3. Test connection: `docker exec discord-bot-postgres psql -U discord_bot -d discord_bot -c '\\l'`\n\n### Web Interface Issues\n1. Check nginx configuration\n2. Verify port 5001 is accessible\n3. Check Flask logs in bot container\n\n## Integration with Other Apps\n\n### Shared Database (Optional)\nIf your other apps need to share data:\n1. Expose PostgreSQL port (5432)\n2. Use same DATABASE_URL in other apps\n3. Coordinate schema changes\n\n### Shared Authentication (Future)\nThe Discord OAuth system can be extended to authenticate users for your other applications.\n\n## Security Considerations\n- Use strong passwords for database\n- Keep bot token secure\n- Regular security updates\n- Monitor access logs\n- Use HTTPS for web interface\n\n## Support\nFor issues specific to the Discord bot functionality, refer to the main project documentation or create an issue in the repository.",
      "size_bytes": 4559,
      "lines": 189
    },
    "ENVIRONMENT_SETUP_GUIDE.md": {
      "filename": "ENVIRONMENT_SETUP_GUIDE.md",
      "content": "# Environment Variables Setup for VPS Deployment\n\n## The Problem\nYour Docker container is showing these warnings:\n```\nWARN[0000] The \"DISCORD_BOT_TOKEN\" variable is not set. Defaulting to a blank string.\nWARN[0000] The \"DB_PASSWORD\" variable is not set. Defaulting to a blank string.\nWARN[0000] The \"SESSION_SECRET\" variable is not set. Defaulting to a blank string.\nWARN[0000] The \"DOMAIN_NAME\" variable is not set. Defaulting to a blank string.\n```\n\nThis means your `.env` file is missing or not being loaded properly.\n\n## Solution Steps\n\n### Step 1: Navigate to Correct Directory\nThe deployment should be in `/home/apps/` directory:\n\n```bash\n# Navigate to the correct directory\ncd /home/apps/tapestryoflegends\n\n# If the directory doesn't exist, you may need to extract the deployment there:\n# cd /home/apps\n# tar -xzf multi-app-deployment-env-fixed.tar.gz\n# mv tapestryoflegends /home/apps/ (if extracted elsewhere)\n\n# Now create .env file with your actual values\ncat > .env << 'EOF'\n# Discord Configuration\nDISCORD_BOT_TOKEN=your_actual_discord_bot_token_here\nDISCORD_CLIENT_ID=your_discord_client_id\nDISCORD_CLIENT_SECRET=your_discord_client_secret\n\n# Database Configuration\nDB_USER=admin\nDB_PASSWORD=your_secure_database_password_here\n\n# Security\nSESSION_SECRET=your_random_session_secret_here\nJWT_SECRET=your_jwt_secret_here\n\n# Domain Configuration\nDOMAIN_NAME=loomoflegends.com\nBASE_URL=https://legends.loomoflegends.com\n\n# Application Environment\nFLASK_ENV=production\nEOF\n```\n\n### Step 2: Get Your Discord Bot Token\n1. Go to https://discord.com/developers/applications\n2. Select your bot application\n3. Go to \"Bot\" section\n4. Copy the token\n5. Replace `your_actual_discord_bot_token_here` in the .env file\n\n### Step 3: Generate Secure Passwords\n```bash\n# Generate secure database password\nopenssl rand -base64 32\n\n# Generate session secret\nopenssl rand -hex 32\n\n# Use these values in your .env file\n```\n\n### Step 4: Set Proper Permissions\n```bash\n# Secure the .env file\nchmod 600 .env\nchown $USER:$USER .env\n```\n\n### Step 5: Restart Services\n```bash\n# Restart with new environment variables\ndocker-compose -f unified-docker-compose.yml down\ndocker-compose -f unified-docker-compose.yml up -d\n```\n\n### Step 6: Verify Environment Loading\n```bash\n# Check if variables are loaded\ndocker-compose -f unified-docker-compose.yml exec tapestryoflegends printenv | grep -E \"(DISCORD|DB_|SESSION)\"\n\n# Should show your actual values, not blank strings\n```\n\n## Example Complete .env File\n\n```env\n# Discord Bot Configuration\nDISCORD_BOT_TOKEN=MTIzNDU2Nzg5MDEyMzQ1Njc4.EXAMPLE.TOKEN-GOES-HERE\nDISCORD_CLIENT_ID=1234567890123456789\nDISCORD_CLIENT_SECRET=abcdef1234567890abcdef1234567890\n\n# Database Configuration  \nDB_USER=admin\nDB_PASSWORD=MySecurePassword123!@#\n\n# Security Secrets\nSESSION_SECRET=a1b2c3d4e5f6789012345678901234567890abcdef1234567890abcdef123456\nJWT_SECRET=f6e5d4c3b2a1098765432109876543210fedcba0987654321fedcba0987654\n\n# Domain Configuration\nDOMAIN_NAME=loomoflegends.com\nBASE_URL=https://legends.loomoflegends.com\n\n# Environment\nFLASK_ENV=production\n```\n\n## Troubleshooting\n\n### If variables still show as blank:\n1. Check file location: `.env` must be in `/home/apps/tapestryoflegends/`\n2. Check file format: No spaces around `=`, no quotes unless needed\n3. Check file permissions: Should be readable by Docker\n\n### If Docker can't read .env:\n```bash\n# Test file exists and is readable\nls -la /home/apps/tapestryoflegends/.env\ncat /home/apps/tapestryoflegends/.env\n\n# Ensure Docker Compose uses the correct file\ndocker-compose -f unified-docker-compose.yml config\n```\n\n### Common Issues:\n- **Token starts with \"Bot \"**: Remove \"Bot \" prefix, just use the token\n- **Extra spaces**: No spaces around `=` in .env files\n- **Wrong file location**: Must be in same directory as docker-compose.yml\n- **Quotes**: Don't quote values unless they contain special characters\n\n## Verification Commands\n\n```bash\n# 1. Check environment file exists\nls -la .env\n\n# 2. Verify Docker loads variables\ndocker-compose -f unified-docker-compose.yml config | grep -A 10 environment\n\n# 3. Check bot connects\ndocker-compose -f unified-docker-compose.yml logs tapestryoflegends | grep \"connected to Discord\"\n\n# 4. Test status endpoint\ncurl -s https://legends.loomoflegends.com/status | jq\n```\n\nOnce your `.env` file is properly configured, the bot should connect successfully and show `\"running\": true` in the status check.",
      "size_bytes": 4410,
      "lines": 155
    }
  }
}